@using Task = KanBanApp.Models.Task
@inherits FluxorComponent
@inject IState<KanbanState> State
@inject StateFacade Facade

<div class="task-details">
    <div class="header">
        <h3>@State.Value.Task!.title</h3>
        <button @onclick="ShowEditOptions" class="edit-task-btn">
            <img src="assets/icon-vertical-ellipsis.svg" alt="" />
        </button>
        <div class="edit-task-option">
            <button @onclick="() => _isTaskDetailsShowing = true" class="edit-task-btn">Edit Task</button>
            <button @onclick="DeleteTask" class="edit-delete-btn">Delete Task</button>
        </div>
    </div>
    <p class="number-of-subtasks">
        Subtasks
        (@State.Value.Task.subtasks!.Count(s => s.isCompleted)
        of
        @State.Value.Task.subtasks!.Count)
    </p>
    
    @if (State.Value.Task != null)
    {
        foreach (var subTask in State.Value.Task.subtasks)
        {
            <p>@subTask.title</p>
        }
    }
    
    <h3>Current Status</h3>
    @State.Value.Task!.status
</div>

@if (_isTaskDetailsShowing)
{
    <UpdateTaskComponent OnUpdateTask="() => _isTaskDetailsShowing = false"/>
}

@code {
    [Parameter]
    public EventCallback OnTaskDelete { get; set; }

    private bool _isTaskDetailsShowing;

    private void ShowEditOptions()
    {
        throw new NotImplementedException();
    }

    private void DeleteTask()
    {
        Facade.DeleteTask(State.Value.Task);
        OnTaskDelete.InvokeAsync();
    }

}
