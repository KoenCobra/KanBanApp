@using Task = KanBanApp.Models.Task
@inherits FluxorComponent
@inject StateFacade Facade
@inject IState<KanbanState> State

<div class="create-new-board">
    <EditForm Model="Board">
        <DataAnnotationsValidator />
        <h2 class="add-board-heading">Add New Board</h2>
        <div class="input">
            <label>Name</label>
            <InputText @bind-Value="Board.name" placeholder="e.g. Web Design" />
        </div>

        <div class="input">
            <label>Columns</label>
            @if (Board.columns != null)
            {
                foreach (var column in Board.columns)
                {
                    <div class="board-colums-input">
                        <InputText @bind-Value="column.name" />
                        <img @onclick="() => Board.columns.Remove(column)" src="assets/icon-cross.svg" alt="" />
                    </div>
                }
                <button @onclick="AddColumns">Add New Column</button>
            }
        </div>
    </EditForm>
    <button @onclick="CreateBoard">create</button>
</div>

<div class="overlay"></div>

@code {
    private Board? Board { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    protected override void OnInitialized()
    {
        Board = new Board
            {
                name = "",
                columns = new List<Column>
            {
                new()
                {
                    name = "Todo",
                    tasks = new List<Task>()
                },
                new()
                {
                    name = "Doing",
                    tasks = new List<Task>()
                }
            }
            };

        base.OnInitialized();
    }

    private void CreateBoard()
    {
        State.Value.Boards.Add(Board);
        OnCreate.InvokeAsync();
    }

    private void AddColumns()
    {
        Board.columns.Add(new Column
            {
                name = "",
                tasks = new List<Task>()
            });
    }
}
