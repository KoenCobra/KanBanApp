@using System.Security.Cryptography
@inherits FluxorComponent
@inject IState<KanbanState> State
@inject StateFacade Facade

<div class="navbar">
    <div class="logo">
        <div class="logo-container"></div>
    </div>
    <div class="boards">

        @if (State.Value.Boards is not null)
        {
            <h5>ALL BOARDS <span>(@State.Value.Boards.Count)</span></h5>
            @foreach (var board in State.Value.Boards)
            {
                <p class="board-name" @onclick="() => Facade.SetCurrentBoard(board.name)">
                    <img src="assets/icon-board.svg" alt="" />
                    @board.name
                </p>
            }
            <button class="create-board-btn" @onclick="CreateNewBoard">
                <img src="assets/icon-board.svg" alt="" />
                + Create New Board
            </button>
        }
    </div>
    <div class="theme-section">
        <img src="assets/icon-light-theme.svg" alt="" />
        <input type="checkbox" />
        <img src="assets/icon-dark-theme.svg" alt="" />
    </div>
    
    <button class="navbar-toggler">
        <div class="toggle-icon"></div>
        <p>Hide Sidebar</p>
    </button>
</div>

@if (_isAddNewBoardShowing)
{
    <CreateBoardComponent OnCreate="CloseCreateComponent" />
}

@code {
    private bool _isAddNewBoardShowing;

    protected override void OnInitialized()
    {
        if (State.Value.Boards is null)
        {
            Facade.LoadKanBan();
        }

        base.OnInitialized();
    }

    private void CreateNewBoard()
    {
        _isAddNewBoardShowing = true;
    }

    private void CloseCreateComponent()
    {
        _isAddNewBoardShowing = false;
    }
}
