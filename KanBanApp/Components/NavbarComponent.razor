@using System.Security.Cryptography
@using Task = System.Threading.Tasks.Task
@inherits FluxorComponent
@inject IState<KanbanState> State
@inject StateFacade Facade

<div class="navbar @(_isSideBarShowing ? "hide" : "")">
    <div class="logo"></div>
    <div class="boards">
        @if (State.Value.Boards is not null)
        {
            <h5 class="all-boards">ALL BOARDS <span>(@State.Value.Boards.Count)</span></h5>
            <ul class="boards-list">
                @foreach (var board in State.Value.Boards)
                {
                    <li class="board-name" @onclick="() => Facade.SetCurrentBoard(board.name)">
                        <img src="assets/icon-board.svg" alt="" />
                        @board.name
                    </li>
                }
            </ul>
            <button class="button create-board-btn " @onclick="() => _isAddNewBoardShowing = true">
                <img class="add-board-icon" src="assets/icon-board.svg" alt="board-icon" />
                + Create New Board
            </button>
        }
    </div>
    <div class="theme-section">
        <img src="assets/icon-light-theme.svg" alt="" />
        <label class="toggler-wrapper style-1">
            <input type="checkbox">
            <div class="toggler-slider">
                <div class="toggler-knob"></div>
            </div>
        </label>
        <img src="assets/icon-dark-theme.svg" alt="" />
    </div>

    <button @onclick="() => _isSideBarShowing = !_isSideBarShowing" class="button navbar-toggler">
        <div class="toggle-icon"></div>
        <span>Hide Sidebar</span>
    </button>
</div>

@if (_isAddNewBoardShowing)
{
    <CreateBoardComponent OnCreate="() => _isAddNewBoardShowing = false" />
}

@code {
    private bool _isAddNewBoardShowing;
    private bool _isSideBarShowing;

    protected override void OnInitialized()
    {
        if (State.Value.Boards is null)
        {
            Facade.LoadKanBan();

        }

        base.OnInitialized();
    }

}
