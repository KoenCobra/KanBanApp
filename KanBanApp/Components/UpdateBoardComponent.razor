@using Task = KanBanApp.Models.Task
@inherits FluxorComponent
@inject StateFacade Facade
@inject IState<KanbanState> State

<div class="edit-board">
    <EditForm Model="State.Value.Board">
        <DataAnnotationsValidator />
        <h2 class="update-board-heading">Edit Board</h2>
        <div class="input">
            <label>Board Name</label>
            <InputText @bind-Value="State.Value.Board.name" />
        </div>

        <div class="input">
            <label>Board Columns</label>
            @if (State.Value.Board != null && State.Value.Board.columns != null)
            {
                foreach (var column in State.Value.Board.columns)
                {
                    <div class="board-colums-input">
                        <InputText class="column-name-input" type="text" @bind-Value="column.name" />
                        <img @onclick="() => State.Value.Board.columns.Remove(column)" src="assets/icon-cross.svg" alt="" />
                    </div>
                }
                <button class="add-column-btn btn" @onclick="AddNewColumn">+ Add New Column</button>
            }
        </div>
    </EditForm>
    <button class="update-board-btn btn" type="submit" @onclick="UpdateBoard">Save Changes</button>
</div>

<div @onclick="() => OnEdit.InvokeAsync()" class="overlay"></div>


@code {
    [Parameter]
    public EventCallback OnEdit { get; set; }

    private void AddNewColumn()
    {
        State.Value.Board.columns!.Add(new Column
            {
                name = "",
                tasks = new List<Task>()
            });
    }

    private void UpdateBoard()
    {
        Facade.UpdateBoard(State.Value.Board);
        OnEdit.InvokeAsync();
    }
}
