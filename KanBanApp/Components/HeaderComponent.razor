@using Task = KanBanApp.Models.Task
@inherits FluxorComponent
@inject IState<KanbanState> State
@inject StateFacade Facade

<div class="header">
    <div class="logo-board-name">
        <div class="logo"></div>
        <p class="board-name">@State.Value.Board.name</p>
    </div>
    <div class="board-details-header">
        <button @onclick="() => _isAddTaskShowing = true" class="add-task-btn btn">+ Add New Task</button>
        <div class="edit-delete-handler ">
            <button onclick="ToggleDropdown()" class="btn drop-btn">
                <img class="drop-btn" src="assets/icon-vertical-ellipsis.svg" alt="ellipis" />
            </button>
            <div class="edit-delete-modal">
                <button class="btn edit-board-btn" @onclick="() => _isUpdateShowing = true">
                    <i class="fa-regular fa-pen-to-square crud-icon"></i>
                    Edit Board
                </button>
                <button class="btn delete-board-btn" @onclick="DeleteBoard">
                    <i class="fa-regular fa-trash-can crud-icon"></i>
                    Delete Board
                </button>
            </div>
        </div>
    </div>
</div>

@if (_isUpdateShowing)
{
    <UpdateBoardComponent OnEdit="() => _isUpdateShowing = false" />
}

@if (_isAddTaskShowing)
{
    <AddTaskComponent OnAddTask="() => _isAddTaskShowing = false" />
}


@code {
    private bool _isAddTaskShowing;
    private bool _isUpdateShowing;

    private void DeleteBoard()
    {
        Facade.DeleteBoard(State.Value.Board.name);
        Facade.SetCurrentBoard(State.Value.Boards.FirstOrDefault().name);
    }

}
