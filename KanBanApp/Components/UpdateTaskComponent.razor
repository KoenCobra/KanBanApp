@inherits FluxorComponent
@inject IState<KanbanState> State
@inject StateFacade Facade

<div class="edit-task">
    <EditForm Model="State.Value.Task">
        <h2>Edit Task</h2>
        <div class="input">
            <label>Title</label>
            <InputText @bind-Value="State.Value.Task!.title" />
        </div>

        <div class="input">
            <label>Description</label>
            <InputTextArea @bind-Value="State.Value.Task!.description" />
        </div>

        <div class="input">
            <label>Subtasks</label>
            @foreach (var subtask in State.Value.Task.subtasks)
            {
                <div class="subtask-input">
                    <InputText @bind-Value="subtask.title" />
                    <img @onclick="() => State.Value.Task.subtasks.Remove(subtask)" src="assets/icon-cross.svg" alt="" />
                </div>
            }

            <button @onclick="() => State.Value.Task.subtasks.Add(new Subtask())">+ Add New Subtask</button>
        </div>

        <div class="input">

            <InputSelect ValueExpression="@(()=>State.Value.Task.status)"
                         Value="@State.Value.Task.status"
                         ValueChanged="@((string value) => OnValueChanged(value ))">
                @foreach (var column in State.Value.Board.columns)
                {
                    <option>@column.name</option>
                }
            </InputSelect>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback OnUpdateTask { get; set; }

    private void OnValueChanged(string value)
    {
        Facade.UpdateTaskStatus(value);
        OnUpdateTask.InvokeAsync();
    }

}
